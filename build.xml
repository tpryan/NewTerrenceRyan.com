<?xml version="1.0" encoding="UTF-8"?>
<project default="test.ant" name="terrenceryan.com" basedir=".">
				
	<property file="build.properties"/>
	
	<target name="test.ant" description="Exports the script of the database ">
		<echo message="Testing ant in this environment. " />
		<echo message="basedir:     ${basedir}" />
		<echo message="ant.version: ${ant.version}" />
	</target>

	<target name="clean">
		<echo message="Cleaning Build Space"/>
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}" includes="**/*" defaultexcludes="no" />
		</delete>
	</target>


	<target name="build" depends="compressCSS,copyFilesToBuild,polish" description="Creating a clean copy of the site" />

	<target name="test-predeploy-default">
        <echo message="Running unit tests with PHPUnit" />

        <exec executable="phpunit" failonerror="true">
            <arg value="test/DevDefaultURLTest.php"/>
        </exec>
    </target>

    <target name="test-predeploy-blog">
        <echo message="Running unit tests with PHPUnit" />

        <exec executable="phpunit" failonerror="true">
            <arg value="test/DevBlogURLTest.php"/>
        </exec>
    </target>


	<target name="deploy" depends="deploy-dispatch,deploy-default,deploy-blog">
	</target>

	<target name="deploy-dispatch">
		<echo message="Updating Dispatch File."/>
		<exec executable="${gcs.exe}" spawn="false" dir="${basedir}">
			<arg line="update_dispatch"/>
			<arg line="."/>
			<arg line="--oauth2" />
			
		</exec>
	</target>

	<target name="deploy-default" depends="compress-css-default,test-predeploy-default">
		<echo message="Deploying to Default site to Appengine."/>
		<exec executable="${gcs.exe}" spawn="false" dir="${basedir}">
			<arg line="update"/>
			<arg line="default/app.yaml"/>
			<arg line="--oauth2" />
			
		</exec>
	</target>

	<target name="deploy-blog">
		<echo message="Deploying to Blog site to Appengine."/>
		<exec executable="${gcs.exe}" spawn="false" dir="${basedir}">
			<arg line="update"/>
			<arg line="wordpress/app.yaml"/>
			<arg line="--oauth2" />
			
		</exec>
	</target>

	<target name="compress-css-default">
		<echo message="Compressing default site's CSS"/>
		<exec executable="scripts/sass_compress.sh" spawn="false" dir="${basedir}">
		</exec>
	</target>


	
	<target name="copyFilesToBuild" description="Create a gitless version of the source code.">
		<echo message="Copying Files to Build Location"/>
		<copy todir="${build.dir}" preservelastmodified="true" verbose="true" >
			<fileset dir="${basedir}/">
				<exclude name='.gitignore'/>
				<exclude name='/examples/**'/>
				<exclude name='.git/**'/>
				<exclude name='build.properties'/>
				<exclude name='build.xml'/>
				<exclude name='build.log'/>
				<exclude name='lib/**'/>
				<exclude name='**/*.scss'/>
				<exclude name='**/cache/*.html'/>
				<exclude name='**/import/**'/>
				<exclude name='.project'/>
				<exclude name='README.MD'/>
			</fileset>	
		</copy>
	</target>

	<target name="copyCredsToBuild" description="Copy DB creds to correct spot">
		<echo message="Copying Files to Build Location"/>
		<copy todir="${build.dir}/config" preservelastmodified="true" verbose="true" >
			<fileset dir="${creds.dir}/">
			</fileset>	
		</copy>
	</target>

	<target name="setVersion">
		<echo message="Generating a Build number"/>
		<buildnumber/>
		<echo message="Build Number ${build.number} "/>
		<property name="app.version" value="2.0.${build.number}"/>	
		<echo message="Application Version: ${app.version} "/> 
	</target>

	<target name="polish">
		<echo message="Removing extra files."/>
		<delete file='${build.dir}/settings.properties'/>
		<delete file='${build.dir}/settings.old.properties'/>
		<delete file='${build.dir}/build.xml'/>
		<delete file='${build.dir}/build.old.xml'/>
		<delete file='${build.dir}/build.number'/>
		<delete file='${build.dir}/.project'/>
		<delete file='${build.dir}/settings.xml'/>
		<delete file='${build.dir}/sql/cleanDatabase.sql'/>
		<delete dir='${build.dir}/trunk'/>
		<delete dir='${build.dir}/test'/>
		<delete dir='${build.dir}/log'/>
		<delete dir='${build.dir}/sql'/>
		<delete dir='${build.dir}/scripts'/>
		<delete dir='${build.dir}/assets/css/.sass-cache'/>
		<delete dir='${build.dir}/TerryRyansORMCodeJumpstart'/>

		<replace summary="${verbose}">
			<fileset dir="${build.dir}">
				<exclude name="**/assets/cache/**"/>
				<exclude name="**/examples/**"/>
				<exclude name="**/createtheweb/**"/>
				<exclude name="**/presos/**"/>
			</fileset>	

			<replacefilter token="terrenceryan.dev" value="terrenceryan.com"/>
		</replace>

		
	</target>

	<target name="zip" description="Creates a zip file of the build.">
		<echo message="Creating Zip File"/>
		<zip destfile="${package.dir}\${app.name}.${app.version}.zip" basedir="${build.dir}"/>
	</target>

	<!-- ****************************  -->
	<!-- SASS TASKS  -->
	<!-- ****************************  -->
	<target name="compressCSS" description="Compresses the CSS with SASS">
		<echo message="Compress"/>
		<echo message="${sass.exe} --update assets/css/scss/main.scss:assets/css/main.css --style compressed"/>
		<exec executable="${sass.exe}" spawn="false" dir="${basedir}">
			<arg line="--update"/>
			<arg line="assets/css/scss/main.scss:assets/css/main.css"/>
			<arg line="--style"/>
			<arg line="compressed"/>
		</exec>
		
	</target>


	<!-- ****************************  -->
	<!-- GIT TASKS  -->
	<!-- ****************************  -->
	<target name="gitTag" description="Creates a tag" depends="setVersion">
		<echo message="Creating Tag: ${app.version}"/>
		
		<exec executable="${git.exe}" spawn="false" dir="${basedir}">
			<arg line="tag"/>
			<arg line="${app.version}"/>
		</exec>
		
	</target>

	<target name="reset" description="Overwrites caches.">
		<echo message="Resetting cache"/>
		
		<get src="http://terrenceryan.com/?reset_cache" dest="/dev/null"/>
		
	</target>



	<!-- ****************************  -->
	<!-- DATABASE TASKS  -->
	<!-- ****************************  -->
	<target name="exportLocalDatabase" description="Exports the script of the local database to file">
		<echo message="Getting MySQL database struture" />
		<exec executable="${mysql.mysqldump.exe}" spawn="false" dir="${mysql.dir}" output="${database.dir}localexport.sql">
			<arg line="--database ${database.schema.local}"/>
			<arg line="--tables"/>
			<arg line="--host ${database.host.local}"/>
			<arg line="--user ${database.username.local}"/>
			<arg line="--password=${database.password.local}"/>
			<arg line="--no-create-db" />
		</exec>
	</target>

	<target name="exportProdDatabase" description="Exports the script of the prod database to file">
		<echo message="Getting MySQL database struture" />
		<exec executable="${mysql.mysqldump.exe}" spawn="false" dir="${mysql.dir}" output="${database.dir}prodexport.sql">
			<arg line="--database ${database.schema.prod}"/>
			<arg line="--tables"/>
			<arg line="--host ${database.host.prod}"/>
			<arg line="--port ${database.port.prod}"/>
			<arg line="--user ${database.username.prod}"/>
			<arg line="--password=${database.password.prod}"/>
			<arg line="--no-create-db" />
		</exec>
	</target>

	<target name="importProdToLocal" depends="exportProdDatabase" description="Imports the prod database locally">
		<echo message="Importing entries into local" />
		<exec executable="${mysql.mysql.exe}" spawn="false" dir="${mysql.dir}" input="${database.dir}prodexport.sql">
			<arg line="--database ${database.schema.local}"/>
			<arg line="--host ${database.host.local}"/>
			<arg line="--user ${database.username.local}"/>
			<arg line="--password=${database.password.local}"/>
		</exec>
	</target>
	
	<target name="importToNewProd" depends="exportProdDatabase" description="Imports the prod database locally">
		<echo message="Importing entries into new prod" />
		<exec executable="${mysql.mysql.exe}" spawn="false" dir="${mysql.dir}" input="${database.dir}prodexport.sql">
			<arg line="--database ${database.schema.newprod}"/>
			<arg line="--host ${database.host.newprod}"/>
			<arg line="--user ${database.username.newprod}"/>
			<arg line="--password=${database.password.newprod}"/>
		</exec>
	</target>

	<target name="backupLocalDatabase" description="Backs up the script of the local database to file">
		<echo message="Getting MySQL database struture" />
		<exec executable="${mysql.mysqldump.exe}" spawn="false" dir="${mysql.dir}" output="${database.dir}localbackup.sql">
			<arg line="--database ${database.schema.local}"/>
			<arg line="--tables"/>
			<arg line="--host ${database.host.local}"/>
			<arg line="--user ${database.username.local}"/>
			<arg line="--password=${database.password.local}"/>
			<arg line="--no-create-db" />
		</exec>
	</target>

	<target name="restoreLocalDatabase" description="Restores the script of the local database from file">
		<echo message="Importing entries into local" />
		<exec executable="${mysql.mysql.exe}" spawn="false" dir="${mysql.dir}" input="${database.dir}localbackup.sql">
			<arg line="--database ${database.schema.local}"/>
			<arg line="--host ${database.host.local}"/>
			<arg line="--user ${database.username.local}"/>
			<arg line="--password=${database.password.local}"/>
		</exec>
	</target>

	<target name="backupProdDatabase" description="Backs up the script of the prod database to file">
		<echo message="Getting MySQL database struture" />
		<exec executable="${mysql.mysqldump.exe}" spawn="false" dir="${mysql.dir}" output="${database.dir}prodbackup.sql">
			<arg line="--database ${database.schema.local}"/>
			<arg line="--tables"/>
			<arg line="--host ${database.host.local}"/>
			<arg line="--user ${database.username.local}"/>
			<arg line="--password=${database.password.local}"/>
			<arg line="--no-create-db" />
		</exec>
	</target>

	<target name="restoreProdDatabase" description="Restores the script of the prod database from file">
		<echo message="Importing entries into local" />
		<exec executable="${mysql.mysql.exe}" spawn="false" dir="${mysql.dir}" input="${database.dir}prodbackup.sql">
			<arg line="--database ${database.schema.newprod}"/>
			<arg line="--host ${database.host.newprod}"/>
			<arg line="--user ${database.username.newprod}"/>
			<arg line="--password=${database.password.newprod}"/>
		</exec>
	</target>


	<target name="projectInt" description="Makes folders needed but that aren't stored in git.">
	    <mkdir dir="${database.dir}" />
	</target>
	

</project>	